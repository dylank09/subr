{"version":3,"sources":["Post.js","App.js","serviceWorker.js","index.js","post.module.css"],"names":["Post","title","text","author","score","image","posthint","useState","postText","setPostText","hideButton","setHideButton","show","setShow","origText","formatted","formatText","length","substring","console","log","useEffect","className","style","post","mainBar","showMoreButtonDiv","button","hidden","onClick","src","alt","App","subreddit","origPosts","setOrigPosts","posts","setPosts","search","setSearch","limit","disableButtons","setDisableButtons","getPosts","a","url","fetch","then","res","json","data","children","map","slice","catch","err","getSubreddit","e","preventDefault","pageSelect","page","start","window","scroll","onSubmit","type","placeholder","onChange","target","value","updateOnEachImageLoad","enableResizableChildren","key","id","selftext","preview","images","source","split","join","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.8d8cd872.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport style from './post.module.css';\r\n\r\nconst Post = ({title=\"hi\", text=\"txt\", \r\n               author=\"me\", score,\r\n               image, posthint=\"\"}) => {\r\n                   \r\n\r\n    const [postText, setPostText] = useState(text);\r\n    const[hideButton, setHideButton] = useState(false);\r\n    const[show, setShow] = useState(\"Show more\");\r\n\r\n    var origText = text;\r\n    var formatted = false;\r\n\r\n    const formatText = () => {\r\n        if(text.length > 650){\r\n            setPostText(text.substring(0, 700) + \"...\");\r\n            formatted = true;\r\n            console.log(\"formatting...\")\r\n        }\r\n        else setHideButton(true);\r\n    }\r\n\r\n    const showMore = () => {\r\n        \r\n        if(formatted) {\r\n            setPostText(origText)\r\n            setShow(\"Show less\");\r\n            formatted = false;\r\n        }\r\n        else {\r\n            formatText();\r\n            setShow(\"Show more\");\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        formatText();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={style.post}>\r\n            <h1 className={style.title}>{title}</h1>\r\n            <div className={style.mainBar}>\r\n                <p className={style.author}>u\\{author}</p>\r\n                <p className={style.score}>Score: {score}</p>\r\n            </div>\r\n            <p className={style.text}>{postText}</p>\r\n            <div className={style.showMoreButtonDiv}>\r\n                <button className={style.button} \r\n                        hidden={hideButton}\r\n                        onClick={showMore}>\r\n                            {show}\r\n                </button>\r\n            </div>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {useState, useEffect} from 'react';\r\nimport Post from './Post';\r\nimport Masonry from 'react-masonry-component';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  let subreddit = \"\";\r\n\r\n  const[origPosts, setOrigPosts] = useState([]);\r\n  const[posts, setPosts] = useState([]);\r\n  const[search, setSearch] = useState(\"\");\r\n  const[limit] = useState(50);\r\n  const[disableButtons, setDisableButtons] = useState(true);\r\n\r\n  const getPosts = async () => {\r\n\r\n    const url = `https://www.reddit.com/search.json?q=${subreddit}&sort=new&limit=${limit}`;\r\n    \r\n    console.log(url);\r\n\r\n    fetch(url)   //gets the required subreddit, number of posts and sorts by most recent\r\n    .then(res => res.json())                //converts the result to json format\r\n    \r\n    .then( data => {\r\n\r\n      data = data.data.children.map(data => data.data);\r\n      console.log(data);\r\n      setOrigPosts(data); \r\n      setPosts(data.slice(0, 10));\r\n\r\n    })\r\n\r\n    .catch(err => console.log(err));\r\n\r\n  };\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const getSubreddit = async e => {\r\n    e.preventDefault();\r\n    setDisableButtons(false);\r\n    subreddit = search;\r\n    await getPosts();\r\n  };\r\n\r\n  const pageSelect = (page) => {\r\n\r\n    var start = (page-1)*10\r\n    setPosts(origPosts.slice(start, start+10));\r\n    window.scroll(0, 0)\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   getSubreddit()\r\n  // }, [limit] )\r\n\r\n  return(\r\n    <div className=\"App\">\r\n      <div className=\"heading-search-div\">\r\n      <h1 className=\"subr-heading\">SUBR</h1>\r\n      <form className=\"search-form\" onSubmit={getSubreddit}>\r\n        <input className=\"search-bar\"\r\n               type=\"text\"\r\n               placeholder=\"Search for a Subreddit here!\"\r\n               onChange={updateSearch}\r\n               value={search}\r\n        />\r\n              \r\n        <button className=\"search-button\" type=\"submit\"/>\r\n        \r\n      </form>\r\n      </div>\r\n      <div className=\"posts-display\">\r\n        <Masonry updateOnEachImageLoad={true}\r\n                enableResizableChildren={true}>\r\n                \r\n          {posts.map(post =>\r\n            <Post key={post.id} \r\n                  title={post.title}\r\n                  text={post.selftext}\r\n                  author={post.author}\r\n                  score={post.score} \r\n                  url={post.url}\r\n                  posthint={post.posthint}\r\n                  image={post.preview ? \r\n                    post.preview.images[0].source.url.split('amp;').join(''):''}\r\n            />\r\n          )} \r\n        </Masonry>\r\n      </div>\r\n      <form hidden={disableButtons} className=\"page-buttons\">\r\n        Page: <br></br>\r\n        <button className=\"b1\" type=\"button\" onClick={() => pageSelect(1)}>1</button> \r\n        <button className=\"b2\" type=\"button\" onClick={() => pageSelect(2)}>2</button> \r\n        <button className=\"b3\" type=\"button\" onClick={() => pageSelect(3)}>3</button> \r\n        <button className=\"b4\" type=\"button\" onClick={() => pageSelect(4)}>4</button> \r\n        <button className=\"b5\" type=\"button\" onClick={() => pageSelect(5)}>5</button>     \r\n      </form>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post_post__S--8W\",\"image\":\"post_image__3JaW9\",\"text\":\"post_text__2WFMR\",\"title\":\"post_title__xtpmW\",\"mainBar\":\"post_mainBar__vtRCm\",\"score\":\"post_score__wJS82\",\"author\":\"post_author__1NsSU\",\"showMoreButtonDiv\":\"post_showMoreButtonDiv__2OX24\",\"button\":\"post_button__22wt9\"};"],"sourceRoot":""}